// <auto-generated />
using System;
using ExchangeProject.DataAccess.Concrete.EntityFramework.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ExchangeProject.DataAccess.Migrations
{
    [DbContext(typeof(ExchangeDbContext))]
    partial class ExchangeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ExchangeProject.Entities.Concrete.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aa835070-6a78-42c6-99df-c14682615666"),
                            ConcurrencyStamp = "5ea4efa9-881d-4e4c-9521-3d0276ec1a5a",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("f7f50d37-b8d5-4cf4-9c3b-427463a871b8"),
                            ConcurrencyStamp = "3be5fc7f-99e2-489d-b2c8-36167e6682d0",
                            Name = "Member"
                        });
                });

            modelBuilder.Entity("ExchangeProject.Entities.Concrete.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4e9541db-062d-4500-9ccb-e4934c796310",
                            Email = "yavuzemilli@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Yavuz",
                            LastName = "Emilli",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEEzeMnkmc8zXnSN+hfIpdeAe36X4H0Kw+4jBJeDO2DoxR7Pt7O8x5Cz3tBP62hNo5w==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "manuelportakal"
                        },
                        new
                        {
                            Id = new Guid("d776cec2-4120-4d88-b8a5-ece32765a970"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "01b5b35b-6e67-4fe3-a509-c65a76c3a5d6",
                            Email = "erenozder@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Eren",
                            LastName = "Ozder",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEGzUl5shPCNtw+RIuvqRntpKe79RQPcl0H7/OcSwLdaMZdRGTVlohHMgwxQOjfCGww==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "erno"
                        });
                });

            modelBuilder.Entity("ExchangeProject.Entities.Concrete.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CoinId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CoinId");

                    b.HasIndex("WalletId");

                    b.ToTable("Asset");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6a05d346-411a-4ca8-972f-d8ce354d4070"),
                            Amount = 9999m,
                            CoinId = new Guid("4c69b0b4-4633-45e6-b461-48684bc23011"),
                            WalletId = new Guid("83d8f26c-e7d3-4480-bdd5-500d700e2ec9")
                        },
                        new
                        {
                            Id = new Guid("6cd1257e-f45f-4872-9379-2e1882597562"),
                            Amount = 1m,
                            CoinId = new Guid("4c69b0b4-4633-45e6-b461-48684bc23011"),
                            WalletId = new Guid("621d80cf-cb97-46b2-9f0c-64e68031c859")
                        });
                });

            modelBuilder.Entity("ExchangeProject.Entities.Concrete.Coin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Coins");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4c69b0b4-4633-45e6-b461-48684bc23011"),
                            Code = "BTC",
                            Name = "Bitcoin"
                        },
                        new
                        {
                            Id = new Guid("e1493a7f-5c0e-4f53-97a5-745222430809"),
                            Code = "ETH",
                            Name = "Ethereum"
                        },
                        new
                        {
                            Id = new Guid("41ec3edd-12a6-47dd-beef-6ea0cd5c5788"),
                            Code = "ADA",
                            Name = "Cardano"
                        },
                        new
                        {
                            Id = new Guid("68c216d0-bb53-416f-b65d-7066be83c744"),
                            Code = "BNB",
                            Name = "Binance Coin"
                        },
                        new
                        {
                            Id = new Guid("5aa4cd28-38a4-4b55-a9f5-e03a0569a1a9"),
                            Code = "USDT",
                            Name = "Tether"
                        },
                        new
                        {
                            Id = new Guid("21ce2213-fd86-43c5-bb0a-c5f0ef6439e5"),
                            Code = "SOL",
                            Name = "Solana"
                        });
                });

            modelBuilder.Entity("ExchangeProject.Entities.Concrete.CoinPair", b =>
                {
                    b.Property<Guid>("PairId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoinId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PairId", "CoinId");

                    b.HasIndex("CoinId");

                    b.ToTable("CoinPair");

                    b.HasData(
                        new
                        {
                            PairId = new Guid("3fbf715a-e9b4-4324-987e-1459ad1435f9"),
                            CoinId = new Guid("4c69b0b4-4633-45e6-b461-48684bc23011"),
                            Id = new Guid("7d1e7831-af96-42df-b768-8647a324cbbf")
                        },
                        new
                        {
                            PairId = new Guid("3fbf715a-e9b4-4324-987e-1459ad1435f9"),
                            CoinId = new Guid("5aa4cd28-38a4-4b55-a9f5-e03a0569a1a9"),
                            Id = new Guid("7d1e7831-af96-42df-b768-8647a324cbbf")
                        },
                        new
                        {
                            PairId = new Guid("6d9b7d78-b560-4de1-9359-82c71848c42b"),
                            CoinId = new Guid("e1493a7f-5c0e-4f53-97a5-745222430809"),
                            Id = new Guid("7683f95c-5b64-45fb-bd14-e308dd29aee7")
                        },
                        new
                        {
                            PairId = new Guid("6d9b7d78-b560-4de1-9359-82c71848c42b"),
                            CoinId = new Guid("5aa4cd28-38a4-4b55-a9f5-e03a0569a1a9"),
                            Id = new Guid("7683f95c-5b64-45fb-bd14-e308dd29aee7")
                        },
                        new
                        {
                            PairId = new Guid("77033d4b-0933-43ec-978f-2387f3f0a702"),
                            CoinId = new Guid("41ec3edd-12a6-47dd-beef-6ea0cd5c5788"),
                            Id = new Guid("b69b0f5a-9e96-4a21-9461-1af0a37957b4")
                        },
                        new
                        {
                            PairId = new Guid("77033d4b-0933-43ec-978f-2387f3f0a702"),
                            CoinId = new Guid("5aa4cd28-38a4-4b55-a9f5-e03a0569a1a9"),
                            Id = new Guid("b69b0f5a-9e96-4a21-9461-1af0a37957b4")
                        },
                        new
                        {
                            PairId = new Guid("b1f5e042-2814-4633-95b9-5a9bd6161301"),
                            CoinId = new Guid("68c216d0-bb53-416f-b65d-7066be83c744"),
                            Id = new Guid("a4b6d863-2b21-4011-8e3c-adbe99423bda")
                        },
                        new
                        {
                            PairId = new Guid("b1f5e042-2814-4633-95b9-5a9bd6161301"),
                            CoinId = new Guid("5aa4cd28-38a4-4b55-a9f5-e03a0569a1a9"),
                            Id = new Guid("a4b6d863-2b21-4011-8e3c-adbe99423bda")
                        },
                        new
                        {
                            PairId = new Guid("ac85e80e-f34f-4aae-80ce-39999aa8c56a"),
                            CoinId = new Guid("21ce2213-fd86-43c5-bb0a-c5f0ef6439e5"),
                            Id = new Guid("4cd794ba-572c-4014-b6aa-9d9d7c701b21")
                        },
                        new
                        {
                            PairId = new Guid("ac85e80e-f34f-4aae-80ce-39999aa8c56a"),
                            CoinId = new Guid("5aa4cd28-38a4-4b55-a9f5-e03a0569a1a9"),
                            Id = new Guid("4cd794ba-572c-4014-b6aa-9d9d7c701b21")
                        });
                });

            modelBuilder.Entity("ExchangeProject.Entities.Concrete.Pair", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Pairs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3fbf715a-e9b4-4324-987e-1459ad1435f9"),
                            Name = "BTC-USDT",
                            Price = 51317.89m
                        },
                        new
                        {
                            Id = new Guid("6d9b7d78-b560-4de1-9359-82c71848c42b"),
                            Name = "ETH-USDT",
                            Price = 3772.04m
                        },
                        new
                        {
                            Id = new Guid("77033d4b-0933-43ec-978f-2387f3f0a702"),
                            Name = "ADA-USDT",
                            Price = 2.64m
                        },
                        new
                        {
                            Id = new Guid("b1f5e042-2814-4633-95b9-5a9bd6161301"),
                            Name = "BNB-USDT",
                            Price = 479.59m
                        },
                        new
                        {
                            Id = new Guid("ac85e80e-f34f-4aae-80ce-39999aa8c56a"),
                            Name = "SOLANA-USDT",
                            Price = 182.94m
                        });
                });

            modelBuilder.Entity("ExchangeProject.Entities.Concrete.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoinId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("TransactionTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CoinId");

                    b.ToTable("Transaction");

                    b.HasData(
                        new
                        {
                            Id = new Guid("04aeaea9-713d-4519-9c8f-eef4acced9cf"),
                            CoinId = new Guid("4c69b0b4-4633-45e6-b461-48684bc23011"),
                            Status = (byte)1,
                            TransactionTime = new DateTime(2021, 9, 10, 12, 10, 19, 433, DateTimeKind.Utc).AddTicks(5747)
                        });
                });

            modelBuilder.Entity("ExchangeProject.Entities.Concrete.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Wallet");

                    b.HasData(
                        new
                        {
                            Id = new Guid("83d8f26c-e7d3-4480-bdd5-500d700e2ec9"),
                            AppUserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9")
                        },
                        new
                        {
                            Id = new Guid("621d80cf-cb97-46b2-9f0c-64e68031c859"),
                            AppUserId = new Guid("d776cec2-4120-4d88-b8a5-ece32765a970")
                        });
                });

            modelBuilder.Entity("ExchangeProject.Entities.Concrete.WalletTransaction", b =>
                {
                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TransactionRole")
                        .HasColumnType("int");

                    b.HasKey("WalletId", "TransactionId");

                    b.HasIndex("TransactionId");

                    b.ToTable("WalletTransaction");

                    b.HasData(
                        new
                        {
                            WalletId = new Guid("83d8f26c-e7d3-4480-bdd5-500d700e2ec9"),
                            TransactionId = new Guid("04aeaea9-713d-4519-9c8f-eef4acced9cf"),
                            Amount = -1m,
                            Id = new Guid("6a05d346-411a-4ca8-972f-d8ce354d4070"),
                            TransactionRole = 1
                        },
                        new
                        {
                            WalletId = new Guid("621d80cf-cb97-46b2-9f0c-64e68031c859"),
                            TransactionId = new Guid("04aeaea9-713d-4519-9c8f-eef4acced9cf"),
                            Amount = 1m,
                            Id = new Guid("6cd1257e-f45f-4872-9379-2e1882597562"),
                            TransactionRole = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            RoleId = new Guid("aa835070-6a78-42c6-99df-c14682615666")
                        },
                        new
                        {
                            UserId = new Guid("d776cec2-4120-4d88-b8a5-ece32765a970"),
                            RoleId = new Guid("f7f50d37-b8d5-4cf4-9c3b-427463a871b8")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ExchangeProject.Entities.Concrete.Asset", b =>
                {
                    b.HasOne("ExchangeProject.Entities.Concrete.Coin", "Coin")
                        .WithMany("Assets")
                        .HasForeignKey("CoinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExchangeProject.Entities.Concrete.Wallet", "Wallet")
                        .WithMany("Assets")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coin");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("ExchangeProject.Entities.Concrete.CoinPair", b =>
                {
                    b.HasOne("ExchangeProject.Entities.Concrete.Coin", "Coin")
                        .WithMany("CoinPairs")
                        .HasForeignKey("CoinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExchangeProject.Entities.Concrete.Pair", "Pair")
                        .WithMany("CoinPairs")
                        .HasForeignKey("PairId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coin");

                    b.Navigation("Pair");
                });

            modelBuilder.Entity("ExchangeProject.Entities.Concrete.Transaction", b =>
                {
                    b.HasOne("ExchangeProject.Entities.Concrete.Coin", "Coin")
                        .WithMany("Transactions")
                        .HasForeignKey("CoinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coin");
                });

            modelBuilder.Entity("ExchangeProject.Entities.Concrete.Wallet", b =>
                {
                    b.HasOne("ExchangeProject.Entities.Concrete.AppUser", "AppUser")
                        .WithOne("Wallet")
                        .HasForeignKey("ExchangeProject.Entities.Concrete.Wallet", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("ExchangeProject.Entities.Concrete.WalletTransaction", b =>
                {
                    b.HasOne("ExchangeProject.Entities.Concrete.Transaction", "Transaction")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExchangeProject.Entities.Concrete.Wallet", "Wallet")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ExchangeProject.Entities.Concrete.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ExchangeProject.Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ExchangeProject.Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ExchangeProject.Entities.Concrete.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExchangeProject.Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ExchangeProject.Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExchangeProject.Entities.Concrete.AppUser", b =>
                {
                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("ExchangeProject.Entities.Concrete.Coin", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("CoinPairs");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("ExchangeProject.Entities.Concrete.Pair", b =>
                {
                    b.Navigation("CoinPairs");
                });

            modelBuilder.Entity("ExchangeProject.Entities.Concrete.Transaction", b =>
                {
                    b.Navigation("WalletTransactions");
                });

            modelBuilder.Entity("ExchangeProject.Entities.Concrete.Wallet", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("WalletTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
